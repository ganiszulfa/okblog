user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/json;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    sendfile on;
    keepalive_timeout 65;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; frame-src 'self' https://www.youtube.com; 
        script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: 'unsafe-inline' *;";

    # Enable gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting zone
    limit_req_zone $binary_remote_addr zone=api_rate_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=web_rate_limit:10m rate=200r/s;

    proxy_cache_path /data/nginx/cache/webcache keys_zone=webcache:10m loader_threshold=100 loader_files=50 max_size=100m;
    proxy_cache_path /data/nginx/cache/apicache keys_zone=apicache:10m loader_threshold=100 loader_files=50 max_size=100m;

    # Upstream server blocks
    upstream post-service {
        server host.docker.internal:8081;
    }

    upstream profile-service {
        server host.docker.internal:8080;
    }

    upstream search-service {
        server host.docker.internal:3003;
    }

    upstream file-service {
        server host.docker.internal:5000;
    }

    upstream web-service {
        server host.docker.internal:3000;
    }

    upstream tag-service {
        server host.docker.internal:3002;
    }

    server {
        listen 80;

        # API gateway routes
        location /api/ {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            include cors-headers.conf;
        }

        # SEARCH SERVICE ROUTES
        location /api/search {
            if ($request_method = 'OPTIONS') {
                include cors-preflight.conf;
            }
            limit_req zone=api_rate_limit burst=10 nodelay;
            limit_req_status 429;

            proxy_cache apicache;
            proxy_cache_valid any 5m;
            proxy_pass http://search-service;
        }
        # END SEARCH SERVICE ROUTES

        # TAG SERVICE ROUTES
        location /api/tags {
            if ($request_method = 'OPTIONS') {
                include cors-preflight.conf;
            }
            limit_req zone=api_rate_limit burst=10 nodelay;
            limit_req_status 429;

            proxy_pass http://tag-service;
        }
        # END TAG SERVICE ROUTES

        # FILE SERVICE ROUTES
        location /api/files {
            if ($request_method = 'OPTIONS') {
                include cors-preflight.conf;
            }
            limit_req zone=api_rate_limit burst=10 nodelay;
            limit_req_status 429;

            # files service only for authenticated users
            auth_request /auth;
            proxy_pass http://file-service;
        }

        # PROFILE SERVICE ROUTES
        location /api/profiles {
            if ($request_method = 'OPTIONS') {
                include cors-preflight.conf;
            }
            limit_req zone=api_rate_limit burst=10 nodelay;
            limit_req_status 429;

            rewrite_log on;
            if ($http_authorization != "") {
                rewrite ^ /__profile_with_auth$uri last;
            }

            proxy_pass http://profile-service;
        }

        location /__profile_with_auth {
            rewrite_log on;
            internal;
            rewrite ^/__profile_with_auth(?<realurl>/.*)$ $realurl break;
            auth_request /auth;
            proxy_pass http://profile-service;
        }
        # END PROFILE SERVICE ROUTES

        # POST SERVICE ROUTES
        location /api/posts {
            if ($request_method = 'OPTIONS') {
                include cors-preflight.conf;
            }
            limit_req zone=api_rate_limit burst=10 nodelay;
            limit_req_status 429;

            rewrite_log on;
            if ($http_authorization != "") {
                rewrite ^ /__post_with_auth$uri last;
            }
            proxy_cache apicache;
            proxy_cache_valid any 30s;
            proxy_pass http://post-service;
        }

        location /__post_with_auth {
            rewrite_log on;
            internal;
            rewrite ^/__post_with_auth(?<realurl>/.*)$ $realurl break;
            auth_request /auth;
            proxy_pass http://post-service;
        }
        # END POST SERVICE ROUTES

        # Authentication subrequest endpoint
        location = /auth {
            internal;
            
            proxy_pass http://profile-service/api/profiles/validate-token;
            proxy_pass_request_body off; # Don't send the request body to auth service
            proxy_set_header Content-Length ""; # Empty content length
            proxy_set_header Authorization $http_authorization;
        }

        # Redirect old URL pattern to new format
        location ~ "^/[0-9]{4}/[0-9]{2}/[0-9]{2}/(.+)$" {
            return 302 /$1;
        }

        location /health {
            access_log off;
            return 200 '{"status":"UP"}';
        }

        # WEB SERVICE ROUTES
        location / {
            limit_req zone=web_rate_limit burst=200 nodelay;
            limit_req_status 429;

            proxy_cache webcache;
            proxy_cache_valid any 5m;
            proxy_pass http://web-service;
        }
        # END WEB SERVICE ROUTES
    }
} 