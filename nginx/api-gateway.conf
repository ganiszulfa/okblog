user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/json;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    sendfile on;
    keepalive_timeout 65;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'";

    # Enable gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting zone
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # Upstream server blocks
    upstream post-service {
        server host.docker.internal:8081;
    }

    upstream profile-service {
        server host.docker.internal:8080;
    }

    server {
        listen 80;

        # API gateway routes
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # Common headers for all API routes
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

            # # Define a variable to store the Authorization header
            # set $auth_header $http_authorization;

            # # Call the auth endpoint
            # auth_request /auth;
            # auth_request_set $auth_status $upstream_status;

            # # If status is not 200, clear the Authorization header
            # if ($auth_status != 200) {
            #     set $auth_header "";
            # }

            # # Use the potentially modified header for your proxied request
            # proxy_set_header Authorization $auth_header;
        }

        # Profile service (no auth required)
        location /api/profile {
            proxy_pass http://profile-service;
        }

        # Post service (requires authentication)
        location /api/posts {
            # Authentication verification
            # auth_request /auth;
            
            # If authentication succeeds, proxy to the post service
            proxy_pass http://post-service;
            
            # Forward the user information to the backend service
            # proxy_set_header X-User $upstream_http_x_user;
        }

        # Authentication subrequest endpoint
        location = /auth {
            internal;
            
            # Proxy to validate token 
            proxy_pass http://profile-service/api/profiles/validate-token;
            proxy_pass_request_body off; # Don't send the request body to auth service
            proxy_set_header Content-Length ""; # Empty content length
            
            # Forward the Authorization header to the auth service
            proxy_set_header Authorization $http_authorization;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"UP2"}';
        }

        # Return 404 for any other requests
        location / {
            return 404;
        }
    }
} 